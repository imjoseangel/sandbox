terraform {
  required_providers {
    random = {
      source  = "hashicorp/random"
      version = ">= 2.2"
    }
  }
}

resource "random_string" "main" {
  length  = 60
  special = false
  upper   = false
  number  = var.unique-include-numbers
}

resource "random_string" "first_letter" {
  length  = 1
  special = false
  upper   = false
  number  = false
}



locals {
  // adding a first letter to guarantee that you always start with a letter
  random_safe_generation = join("", [random_string.first_letter.result, random_string.main.result])
  random                 = substr(coalesce(var.unique-seed, local.random_safe_generation), 0, var.unique-length)
  prefix                 = join("-", var.prefix)
  prefix_safe            = lower(join("", var.prefix))
  suffix                 = join("-", var.suffix)
  suffix_unique          = join("-", concat(var.suffix, [local.random]))
  suffix_safe            = lower(join("", var.suffix))
  suffix_unique_safe     = lower(join("", concat(var.suffix, [local.random])))
  // Names based in the recomendations of
  // https://docs.microsoft.com/en-us/azure/cloud-adoption-framework/ready/azure-best-practices/naming-and-tagging
  az = {
    {%- for item in data %}
    {{ item.name }} = {
      name        = substr(join("{% if item.dashes %}-{% endif %}", compact([local.prefix{% if not item.dashes %}_safe{% endif %}, "{{ item.slug }}", local.suffix{% if not item.dashes %}_safe{% endif %}])), 0, {{ item.length.max }})
      name_unique = substr(join("{% if item.dashes %}-{% endif %}", compact([local.prefix{% if not item.dashes %}_safe{% endif %}, "{{ item.slug }}", local.suffix_unique{% if not item.dashes %}_safe{% endif %}])), 0, {{ item.length.max}})
      dashes      = {{ item.dashes | lower }}
      slug        = "{{ item.slug }}"
      min_length  = {{ item.length.min }}
      max_length  = {{ item.length.max }}
      scope       = "{{ item.scope }}"
      regex       = "{{ item.regex | cleanRegex | safe }}"
    }
    {%- endfor %}
  }
  validation = {
    {%- for item in data %}
    {{ item.name }} = {
      valid_name        = length(regexall(local.az.{{- item.name }}.regex, local.az.{{- item.name  }}.name)) > 0 && length(local.az.{{- item.name  }}.name) > local.az.{{- item.name  }}.min_length
      valid_name_unique = length(regexall(local.az.{{- item.name }}.regex, local.az.{{- item.name }}.name_unique)) > 0
    }
    {%- endfor %}
  }
}
