#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
DNS Verifier
"""

import argparse
import logging
import os
import socket
import sys
import dns.resolver
import yaml


class DNSVerify:
    """
    Main DNS Verifier Class
    """

    def __init__(self):
        """init"""

        # Variables
        self.output = {}
        self.config = None
        self.cansave = None
        self.args = None

        # Parse arguments passed at cli
        self.parse_arguments()

        logging.basicConfig(format="%(asctime)s - %(message)s",
                            datefmt="%d-%b-%y %H:%M:%S", stream=sys.stdout, level=logging.INFO)

        # Output Dictionary
        self.mainfunc()
        self.output_results()

    def parse_arguments(self):
        """argument parser"""
        parser = argparse.ArgumentParser(
            description='DNS Verifier')

        args_required = parser.add_argument_group('Required named arguments')
        args_required.add_argument('--config',
                                   '-c',
                                   help='Configuration File', required=True)
        args_required.add_argument('--domain',
                                   '-d',
                                   help='DNS Domain', required=True)
        args_required.add_argument('--nameserver',
                                   '-n',
                                   help='DNS Server Name', required=True)

        self.args = parser.parse_args()

    def mainfunc(self):
        """main function"""
        try:
            with open(self.args.config, 'r', encoding='UTF-8') as stream:
                try:
                    self.config = yaml.load(stream, Loader=yaml.FullLoader)
                except yaml.YAMLError as exception:
                    logging.warning('WARNING: % s', exception)
        except IOError as exception:
            logging.warning('WARNING: % s', exception)

        self.dns_resolver()

    def dns_resolver(self):
        """DNS Resolver"""
        resolver = dns.resolver.Resolver()

        try:
            resolver.nameservers = [socket.gethostbyname(self.args.nameserver)]
        except socket.gaierror as exception:
            logging.warning('WARNING: % s', exception)

        for item in self.config:
            try:
                for data in resolver.resolve(f'{item}.{self.args.domain}',
                                             f'{self.config[item]["type"]}'):

                    dnsvalue = data.to_text().strip('"')
                    if self.config[item]["value"] == dnsvalue:
                        print(
                            f'[OK] {item}.{self.args.domain} records matched')
                    else:
                        self.output.update(
                            {item: {'add': self.config[item]["value"], 'delete': dnsvalue}})
                        print(f'[CHG] {item}.{self.args.domain} did not match')

            except dns.resolver.NXDOMAIN as exception:
                logging.warning('WARNING: % s', exception)

    def output_results(self):
        """output results"""
        try:
            # Checks if using Docker
            if os.environ["PLATFORM"] == "docker":
                self.cansave = False
        except KeyError:
            self.cansave = True

        try:
            if self.cansave:
                with open('changes.yaml', 'w', encoding='UTF-8') as output:
                    try:
                        output.write(
                            f"# Zone changes for {self.args.domain}\n")
                        yaml.dump(self.output, output)
                        output.write("\n")
                    except yaml.YAMLError as exception:
                        logging.warning('WARNING: % s', exception)
        except IOError as exception:
            logging.warning('WARNING: % s', exception)


def main():
    """main"""
    DNSVerify()


if __name__ == '__main__':
    main()
