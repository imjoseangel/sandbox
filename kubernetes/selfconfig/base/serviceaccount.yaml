---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name:  create-deployments
rules:
  - apiGroups: ["*"]
    resources: ["deployments","pods","services","networkpolicies.networking.k8s.io","configmaps"]
    verbs: ["get","list","watch","create","update","patch","apply"]
  - apiGroups: ["batch"]
    resources: ["jobs", "cronjobs"]
    verbs: ["*"]
  - apiGroups: ["secrets-store.csi.x-k8s.io"]
    resources: ["secretproviderclasses"]
    verbs:  ["get","list","watch","patch","create","update"]
  - apiGroups: ["secrets-store.csi.x-k8s.io"]
    resources: ["secretproviderclasspodstatuses"]
    verbs:  ["get","list","watch","create","update","patch","apply"]
  - apiGroups: ["secrets-store.csi.x-k8s.io"]
    resources: ["secretproviderclasspodstatuses/status"]
    verbs:  ["get","update","patch"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: azure-devops-svc
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: azure-devops-role-binding-svc
roleRef:
  kind: ClusterRole
  name: create-deployments
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: azure-devops-svc
    namespace: default

# Documentation: http://cloudhacks.blog/2020/11/creating-kubernetes-service-accounts-and-azure-devops-service-connection/
# kubectl auth can-i create pods --as=system:serviceaccount:default:azure-devops-svc
# kubectl auth can-i create pods -n argocd --as=system:serviceaccount:default:azure-devops-svc
# kubectl auth can-i create namespaces --as=system:serviceaccount:default:azure-devops-svc
